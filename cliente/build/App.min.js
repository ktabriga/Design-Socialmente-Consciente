!function(){"use strict";angular.module("app.problema",["ui.router","oc.lazyLoad"])}(),function(){"use strict";angular.module("app.usuario",["ui.router","oc.lazyLoad"])}(),function(){"use strict";angular.module("app",["app.usuario","app.problema","ui.router","oc.lazyLoad","ngMaterial","toaster"])}(),function(){"use strict";function r(r,e,o,t,a){r.html5Mode(!0);var n=[{name:"app.usuario",files:["build/Usuario.min.js"]},{name:"app.problema",files:["build/Problema.min.js"]}],i=[],u={modulos:n,scripts:i};o.constant("APP_CONFIG",u),e.config({debug:!1,events:!0,modules:n}),t.theme("default").primaryPalette("teal").accentPalette("indigo"),a.interceptors.push("Interceptador")}angular.module("app").config(r),r.$inject=["$locationProvider","$ocLazyLoadProvider","$provide","$mdThemingProvider","$httpProvider"]}(),function(){"use strict";function r(r,t){r.otherwise("/"),t.state("app.problema",{url:"problema",views:{conteudo:{templateUrl:e("problema/listar"),controller:"ProblemaController",controllerAs:"vm",resolve:o("app.problema")}}}).state("app.problemaCadastrar",{url:"problema/cadastrar",views:{conteudo:{templateUrl:e("problema/form"),controller:"ProblemaController",controllerAs:"vm",resolve:o("app.problema")}}}).state("app.problemaEditar",{url:"problema/editar/:idProblema",views:{conteudo:{templateUrl:e("problema/form"),controller:"ProblemaController",controllerAs:"vm",resolve:o("app.problema")}}})}function e(r){return"/api/templates/"+r}function o(){var r=arguments;return{lazyLoad:["RotasService",function(e){return e.load(r)}]}}angular.module("app.problema").config(r),r.$inject=["$urlRouterProvider","$stateProvider"]}(),function(){"use strict";function r(r,t){r.otherwise("/"),t.state("app.usuario",{url:"usuario",views:{conteudo:{templateUrl:e("usuario/listar"),controller:"UsuarioController",controllerAs:"vm",resolve:o("app.usuario")}}}).state("app.usuarioCadastrar",{url:"usuario/cadastrar",views:{conteudo:{templateUrl:e("usuario/form"),controller:"UsuarioController",controllerAs:"vm",resolve:o("app.usuario")}}}).state("app.usuarioEditar",{url:"usuario/editar/:idUsuario",views:{conteudo:{templateUrl:e("usuario/form"),controller:"UsuarioController",controllerAs:"vm",resolve:o("app.usuario")}}})}function e(r){return"/api/templates/"+r}function o(){var r=arguments;return{lazyLoad:["RotasService",function(e){return e.load(r)}]}}angular.module("app.usuario").config(r),r.$inject=["$urlRouterProvider","$stateProvider"]}(),function(){"use strict";function r(r,a){r.otherwise("/inicio"),a.state("app",{url:"/","abstract":!0,controller:"AppController",controllerAs:"vm",templateUrl:e("principal"),resolve:t()}).state("app.inicio",{url:"inicio",template:"<h1>Inicio</h1>"}).state("login",{url:"/login",templateUrl:e("login"),controller:"LoginController",controllerAs:"vm",resolve:o("app.usuario")}).state("registrar",{url:"/registrar",templateUrl:e("registrar"),controller:"LoginController",controllerAs:"vm",resolve:o("app.usuario")})}function e(r){return"/api/templates/"+r}function o(){var r=arguments;return{lazyLoad:["RotasService",function(e){return e.load(r)}]}}function t(){return{autenticar:["$window","$location",function(r,e){r.localStorage.token||e.path("/login")}]}}angular.module("app").config(r),r.$inject=["$urlRouterProvider","$stateProvider"]}(),function(){"use strict";function r(r){function e(){r("menuPrincipal").toggle().then(function(){})}var o=this;o.mostrarMenu=e}angular.module("app").controller("AppController",r),r.$inject=["$mdSidenav"]}(),function(){"use strict";function r(r,e,o,t){function a(r){return r.headers=r.headers||{},e.localStorage.token&&(r.headers.Authorization="Bearer "+e.localStorage.token),r}function n(e){return 401===e.status&&(o.path("/login"),t.pop("error","Erro!",e.data.mensagem)),t.pop("error","Ocorreu um Erro",e.data.mensagem),r.reject(e.data.mensagem)}var i={request:a,responseError:n};return i}angular.module("app").factory("Interceptador",r),r.$inject=["$q","$window","$location","toaster"]}(),function(){"use strict";function r(r,e,o,t,a){function n(t){r.post("./api/autenticacao",t).success(function(r){e.localStorage.token=r.token,o.go("app.inicio")}).error(function(){delete e.localStorage.token})}function i(r){t.create(r)}var u=this;u.logar=n,u.salvarUsuario=i,a.addEventListener("usuario:create_success",function(r,e){l.success(e)}),a.addEventListener("usuario:create_error",function(r,e){l.error(e)});var l={success:function(){u.message="Usuário criado com sucesso",o.go("login")},error:function(r){u.message=r.message,console.warn(r)}}}angular.module("app").controller("LoginController",r),r.$inject=["$http","$window","$state","UsuarioModel","Notificacao"]}(),function(){"use strict";function r(){function r(r,e){t[r]||(t[r]=[]),t[r].push(e)}function e(r,e){if(t[r]){var o=t[r].indexOf(e);-1!==o&&t[r].splice(o,1)}}function o(){var r;if("string"!=typeof arguments[0])console.warn("Notification","Primeiro parâmetro deve ser um nome de evento (String)");else{r=t[arguments[0]];for(var e in r)r[e].apply(null,arguments)}}var t={},a={_listeners:t,addEventListener:r,notify:o,removeEventListener:e};return a}angular.module("app").factory("Notificacao",r)}(),function(){"use strict";function r(r,e,o){function t(o){function t(e){return u.then("function"==typeof e?e:function(){var o=i(e);return o?r.load(o):$.error("Route resolve: Bad resource name ["+e+"]")})}function i(r){if(a)for(var e in a)if(a[e].name&&a[e].name===r)return a[e];return n&&n[r]}for(var u=e.when(1),l=0,s=o.length;s>l;l++)u=t(o[l]);return u}var a=o.modulos,n=o.scripts,i={load:t};return i}angular.module("app").service("RotasService",r),r.$inject=["$ocLazyLoad","$q","APP_CONFIG"]}();
//# sourceMappingURL=data:application/json;base64,